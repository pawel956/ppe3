/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.admin;

import com.karimandco.auth.Utilisateur;
import com.karimandco.bdd.DaoSIO;
import com.pradyna.components.Utilitaire;
import com.pradyna.components.choixdossier.DialogChoixDossier;
import com.pradyna.components.choixfichier.DialogChoixFichier;
import com.pradyna.components.importexport.ImportExportCSV;
import com.pradyna.components.importexport.ImportExportJSON;
import com.pradyna.components.importexport.ImportExportXML;
import com.pradyna.components.inscriptionv2.DialogFormInscriptionv2;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author t.normand
 */
public class PanneauAdministration extends javax.swing.JPanel {

    public String[] entetes = {"#", "Identifiant", "Nom", "Prénom", "Courriel", "Numéro de téléphone", "Numéro de téléphone deux"};
    public Object[][] data_test = {{"L1.1", "L1.2", "L1.1", "L1.2", "L1.1", "L1.2", "L1.1", "L1.2", "L1.2"}};

    javax.swing.JDialog panneauPereAdministration = null;

    private final Helpers helpers;
    public com.karimandco.admin.DialogFormInscription cInscription;
    public com.karimandco.admin.DialogFormModification cDialogFormModification;
    public com.pradyna.components.inscriptionv2.DialogFormInscriptionv2 cDialogFormInscriptionv2;
    public com.karimandco.admin.Connexion cConnexionAdmin;
    public com.pradyna.components.choixdossier.DialogChoixDossier cChoixDossier;
    public com.pradyna.components.choixfichier.DialogChoixFichier cChoixFichier;

    /**
     * Creates new form PanneauAdministration
     */
    public PanneauAdministration() {
        initComponents();
        try {
            //Appelle de la fonction pour update les informations du tableau
            updateJTableInfo();
        } catch (Exception e) {
        }
        helpers = new Helpers();
        jTableInfo.setDefaultEditor(Object.class, null);
    }

    public void setFenParentAdministration(javax.swing.JDialog i) {
        this.panneauPereAdministration = i;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSuppToutUtilisateurs = new javax.swing.JButton();
        jButtonRafraichir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInfo = new javax.swing.JTable();
        jButtonCreerUtilisateur = new javax.swing.JButton();
        jButtonModifierUtilisateur = new javax.swing.JButton();
        jButtonSuppUtilisateur = new javax.swing.JButton();
        jButtonExporter = new javax.swing.JButton();
        jButtonImporter = new javax.swing.JButton();

        jButtonSuppToutUtilisateurs.setBackground(new java.awt.Color(0, 0, 0));
        jButtonSuppToutUtilisateurs.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonSuppToutUtilisateurs.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSuppToutUtilisateurs.setText("Supprimer tous les utilisateurs");
        jButtonSuppToutUtilisateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuppToutUtilisateursActionPerformed(evt);
            }
        });

        jButtonRafraichir.setBackground(new java.awt.Color(0, 0, 0));
        jButtonRafraichir.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonRafraichir.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRafraichir.setText("Rafraichir");
        jButtonRafraichir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRafraichirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setText("< INTERFACE ESPACE ADMINISTRATION >");

        jTableInfo.setBackground(new java.awt.Color(255, 255, 255));
        jTableInfo.setForeground(new java.awt.Color(0, 0, 0));
        jTableInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nom", "Prénom", "Naissance", "Téléphone", "Mot de passe", "Photo", "Statut"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableInfo);
        if (jTableInfo.getColumnModel().getColumnCount() > 0) {
            jTableInfo.getColumnModel().getColumn(0).setResizable(false);
            jTableInfo.getColumnModel().getColumn(1).setResizable(false);
            jTableInfo.getColumnModel().getColumn(2).setResizable(false);
            jTableInfo.getColumnModel().getColumn(3).setResizable(false);
            jTableInfo.getColumnModel().getColumn(4).setResizable(false);
            jTableInfo.getColumnModel().getColumn(5).setResizable(false);
            jTableInfo.getColumnModel().getColumn(6).setResizable(false);
            jTableInfo.getColumnModel().getColumn(7).setResizable(false);
        }

        jButtonCreerUtilisateur.setBackground(new java.awt.Color(0, 0, 0));
        jButtonCreerUtilisateur.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonCreerUtilisateur.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreerUtilisateur.setText("Créer un utilisateur ");
        jButtonCreerUtilisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreerUtilisateurActionPerformed(evt);
            }
        });

        jButtonModifierUtilisateur.setBackground(new java.awt.Color(0, 0, 0));
        jButtonModifierUtilisateur.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonModifierUtilisateur.setForeground(new java.awt.Color(255, 255, 255));
        jButtonModifierUtilisateur.setText("Modifier un utilisateur");
        jButtonModifierUtilisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModifierUtilisateurActionPerformed(evt);
            }
        });

        jButtonSuppUtilisateur.setBackground(new java.awt.Color(0, 0, 0));
        jButtonSuppUtilisateur.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonSuppUtilisateur.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSuppUtilisateur.setText("Supprimer un utilisateur");
        jButtonSuppUtilisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSuppUtilisateurActionPerformed(evt);
            }
        });

        jButtonExporter.setBackground(new java.awt.Color(0, 0, 0));
        jButtonExporter.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonExporter.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExporter.setText("Exporter compte(s)");
        jButtonExporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExporterActionPerformed(evt);
            }
        });

        jButtonImporter.setBackground(new java.awt.Color(0, 0, 0));
        jButtonImporter.setFont(new java.awt.Font("Segoe UI Black", 0, 11)); // NOI18N
        jButtonImporter.setForeground(new java.awt.Color(255, 255, 255));
        jButtonImporter.setText("Importer compte(s)");
        jButtonImporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImporterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRafraichir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCreerUtilisateur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonModifierUtilisateur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSuppUtilisateur, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSuppToutUtilisateurs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExporter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(484, 484, 484))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCreerUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonModifierUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSuppUtilisateur, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSuppToutUtilisateurs, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRafraichir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(jButtonExporter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonImporter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSuppToutUtilisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuppToutUtilisateursActionPerformed
        cConnexionAdmin = new Connexion(this);
        cConnexionAdmin.getPanneauFormConnexion1().getjLabel1().setText("Connexion administration");
        cConnexionAdmin.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        cConnexionAdmin.getPanneauFormConnexion1().getjButtonConnexion().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (cConnexionAdmin.getPanneauFormConnexion1().getConnexionOK()) {
                    Utilisateur.setIdentifiant(cConnexionAdmin.getPanneauFormConnexion1().getPanneauIdentifiant().getChamp2().getText());
                    Utilisateur.getInstance().chargerInformationsUtilisateur();
                    if (Utilisateur.getInstance().getEstConnecte() && Utilisateur.getInstance().getStatut().equals(1)) {
                        Boolean Supp = false;
                        cConnexionAdmin.setVisible(false);
                        //Création d'un message de confirmation pour la suppression de l'intégralité des utilisateurs
                        JOptionPane jop = new JOptionPane();
                        int option = jop.showConfirmDialog(null, "Voulez-vous vraiment supprimer l'intégralité de la table 'utilisateurs' ?", "Confirmation requise", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                        //Si le message est égal à Ok
                        if (option == JOptionPane.OK_OPTION) {
                            //Supp est vrai
                            Supp = true;
                            //Si la fonction pour tout supprimer est appelée et que Supp est vrai alors création message de confirmation, appelle de la fonction, suppression du contenu de la table
                            if (DaoSIO.getInstance().requeteAction("DELETE FROM utilisateurs WHERE statut = 0") == 1 && Supp == true) {
                                updateJTableInfo();
                                JOptionPane.showMessageDialog(null,
                                        "Les utilisateurs ont été supprimés sauf les administrateurs.",
                                        "Suppresion de tous les utilisateurs",
                                        JOptionPane.INFORMATION_MESSAGE);
                            }
//                            else {
//                            //Sinon, message d'erreur
//                            jLabelEtatVider.setForeground(Color.blue);
//                            jLabelEtatVider.setText("Les utilisateurs ont été supprimés sauf les administrateurs.");
//                            updateJTableInfo();
//                        }
                            //Si Supp est différent de vrai, message d'erreur
                        } else if (Supp != true) {
                            JOptionPane.showMessageDialog(null,
                                    "L'opération a été annulée",
                                    "Suppresion de tous les utilisateurs",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        cConnexionAdmin.getPanneauFormConnexion1().getjLabelEtatConnexion().setForeground(Color.red);
                        if (Utilisateur.getInstance().getEstConnecte().equals(false)) {
                            cConnexionAdmin.getPanneauFormConnexion1().getjLabelEtatConnexion().setText("Identifiant et/ou mot de passe incorrect(s)");
                        } else if (!Utilisateur.getInstance().getStatut().equals(1)) {
                            cConnexionAdmin.getPanneauFormConnexion1().getjLabelEtatConnexion().setText("Vous n'êtes pas admin");
                        }
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
        cConnexionAdmin.setLocationRelativeTo(this);
        cConnexionAdmin.setModal(true);
        cConnexionAdmin.setVisible(true);
    }//GEN-LAST:event_jButtonSuppToutUtilisateursActionPerformed

    private void jButtonRafraichirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRafraichirActionPerformed
        updateJTableInfo();
        //Elaboration du message de succès
        JOptionPane.showMessageDialog(null,
                "Les données ont été rafraichies",
                "Rafraichissement des données",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonRafraichirActionPerformed

    private void jButtonCreerUtilisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreerUtilisateurActionPerformed
        cInscription = new DialogFormInscription(this);
        cInscription.getPanneauFormInscriptionv21().getjButton1().setText("Créer un utilisateur");
        cInscription.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        cInscription.getPanneauFormInscriptionv21().getjButton1().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (cInscription.getPanneauFormInscriptionv21().getInscriptionOK()) {
                    cInscription.setVisible(false);
                    updateJTableInfo();
                    JOptionPane.showMessageDialog(null,
                            "Inscription réussie",
                            "Inscription de l'utilisateur",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }

            @Override

            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });

        cInscription.setLocationRelativeTo(this);
        cInscription.setModal(true);
        cInscription.setVisible(true);
    }//GEN-LAST:event_jButtonCreerUtilisateurActionPerformed

    private void jButtonModifierUtilisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModifierUtilisateurActionPerformed
        //Création d'une variable integer pour la selection d'une ligne dans la table
        int idTable = jTableInfo.getSelectedRowCount();
        //Si aucune ligne n'est séléctionnées, ça fait un message d'erreur
        if (idTable < 0) {
            JOptionPane.showMessageDialog(null,
                    "Veuillez sélectionner un utilisateur",
                    "Modification des informations de l'utilisateur",
                    JOptionPane.ERROR_MESSAGE);
        } else if (idTable == 1) {
            Integer numLigne = jTableInfo.getSelectedRow();
            TableModel test = jTableInfo.getModel();
            //Raliement des colonnes id, nom et prenom à une valeur pour l'identifier
            int id = Integer.parseInt(String.valueOf(test.getValueAt(numLigne, 0)));

            String[][] resultat = requeteSelectAll("SELECT * FROM utilisateurs, villes, pays WHERE utilisateurs.id_ville = villes.id AND villes.id_pays = pays.id AND utilisateurs.id ='" + id + "'");
            //Si le nom de lignes du tableau de la BDD est supérieur à 0 alors application des données de la BDD à notre tableau
            if (resultat[0].length > 0) {
                cDialogFormModification = new DialogFormModification(this);
                cDialogFormModification.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

                cDialogFormModification.getPanneauFormModification1().getjLabel1().setText("Modification des informations du compte " + resultat[0][2]);
                cDialogFormModification.getPanneauFormModification1().getPanneauNom().getChamp2().setText(resultat[0][4]);
                cDialogFormModification.getPanneauFormModification1().getPanneauPrenom().getChamp2().setText(resultat[0][5]);
                cDialogFormModification.getPanneauFormModification1().getPanneauIdentifiant().getChamp2().setText(resultat[0][2]);
                cDialogFormModification.getPanneauFormModification1().getPanneauCourriel().getChamp2().setText(resultat[0][7]);
                cDialogFormModification.getPanneauFormModification1().getPanneauNumeroTelephone().getChamp2().setText(resultat[0][6]);
                String[] date_split = resultat[0][8].split("-");
                resultat[0][8] = date_split[2] + "/" + date_split[1] + "/" + date_split[0];
                cDialogFormModification.getPanneauFormModification1().getPanneauDateNaissance().getChamp2().setText(resultat[0][8]);

                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauNumeroTelephoneDeux().getChamp2().setText(resultat[0][10]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauSiteWeb().getChamp2().setText(resultat[0][11]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauPays().getChamp2().setText(resultat[0][21]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauCodePostal().getChamp2().setText(resultat[0][18]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauVille().getChamp2().setText(resultat[0][19]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauNumeroRue().getChamp2().setText(resultat[0][13]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauAdresse().getChamp2().setText(resultat[0][14]);
                cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauInfoComp().getChamp2().setText(resultat[0][15]);

                cDialogFormModification.getPanneauFormModification1().updateAllJLabelEtat();

                cDialogFormModification.getPanneauFormModification1().getjButton1().addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        if (cDialogFormModification.getPanneauFormModification1().getModificationOK()) {
                            cDialogFormModification.dispose();
                            cDialogFormModification.setVisible(false);
                            updateJTableInfo();

                            if (cDialogFormModification.getPanneauFormModification1().updateBDD()) {
                                JOptionPane.showMessageDialog(null,
                                        "L'utilisateur a été mis à jour",
                                        "Modification des informations de l'utilisateur",
                                        JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        "Echec de la mise à jour",
                                        "Modification des informations de l'utilisateur",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                });

                cDialogFormModification.setLocationRelativeTo(this);
                cDialogFormModification.setModal(true);
                cDialogFormModification.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Vous ne pouvez modifier qu'un utilisateur à la fois",
                    "Modification des informations de l'utilisateur",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonModifierUtilisateurActionPerformed

    private void jButtonSuppUtilisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSuppUtilisateurActionPerformed

        //Création d'une variable integer pour la selection d'une ligne dans la table
        int idTable = jTableInfo.getSelectedRow();

        //Si aucune ligne n'est séléctionnées, ça fait un message d'erreur
        if (idTable < 0) {
            JOptionPane.showMessageDialog(null,
                    "Veuillez sélectionner un utilisateur",
                    "Suppresion de l'utilisateur",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            cConnexionAdmin = new Connexion(this);
            cConnexionAdmin.getPanneauFormConnexion1().getjLabel1().setText("Connexion administration");
            cConnexionAdmin.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

            cConnexionAdmin.getPanneauFormConnexion1().getjButtonConnexion().addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    Utilisateur.setIdentifiant(cConnexionAdmin.getPanneauFormConnexion1().getPanneauIdentifiant().getChamp2().getText());
                    Utilisateur.getInstance().chargerInformationsUtilisateur();
                    if (cConnexionAdmin.getPanneauFormConnexion1().getConnexionOK()) {
                        if (Utilisateur.getInstance().getEstConnecte() && Utilisateur.getInstance().getStatut().equals(1)) {
                            cConnexionAdmin.setVisible(false);
                            //Creation de la variable boolean Supp étant fausse
                            TableModel test = jTableInfo.getModel();
                            //Raliement des colonnes id, nom et prenom à une valeur pour l'identifier
                            Object id = test.getValueAt(idTable, 0);
                            Object nom = test.getValueAt(idTable, 2);
                            Object prenom = test.getValueAt(idTable, 3);

                            //Création d'un message de confirmation pour la suppression de l'utilisateur
                            JOptionPane jop = new JOptionPane();
                            int option = jop.showConfirmDialog(null, "Voulez-vous vraiment supprimer l'utilisateur '" + prenom + " " + nom + "' ?", "Confirmation requise", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                            if (option == JOptionPane.OK_OPTION) {
                                int id_utilisateur_a_supprimer = (Integer.parseInt(String.valueOf(id)));
                                ResultSet lesResultats = DaoSIO.getInstance().requeteSelection("SELECT statut FROM utilisateurs WHERE id = '" + id_utilisateur_a_supprimer + "'");
                                try {
                                    if (lesResultats.next()) {
                                        if (lesResultats.getInt("statut") == 0) {
                                            if (helpers.supprimeToutCV(id_utilisateur_a_supprimer) && (DaoSIO.getInstance().requeteAction("DELETE FROM utilisateurs WHERE id='" + id_utilisateur_a_supprimer + "'") == 1)) {
                                                updateJTableInfo();
                                                JOptionPane.showMessageDialog(null,
                                                        "La suppression de l'utilisateur est réussie",
                                                        "Suppresion de l'utilisateur",
                                                        JOptionPane.INFORMATION_MESSAGE);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null,
                                                    "Les administrateurs ne peuvent pas être supprimés",
                                                    "Suppresion de l'utilisateur",
                                                    JOptionPane.ERROR_MESSAGE);
                                        }
                                    }
                                } catch (SQLException ex) {
                                    Logger.getLogger(PanneauAdministration.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null,
                                        "L'opération a été annulée",
                                        "Suppresion de l'utilisateur",
                                        JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            }
            );
            cConnexionAdmin.setLocationRelativeTo(this);
            cConnexionAdmin.setModal(true);
            cConnexionAdmin.setVisible(true);
        }
    }//GEN-LAST:event_jButtonSuppUtilisateurActionPerformed

    private void jButtonExporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExporterActionPerformed
        if (jTableInfo.getSelectedRowCount() > 0) {
            cChoixDossier = new DialogChoixDossier(this);
            cChoixDossier.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            cChoixDossier.getPanneauChoixDossier().getjRadioButtonTout().setEnabled(false);
            cChoixDossier.getPanneauChoixDossier().getjRadioButtonCV().setEnabled(false);
            cChoixDossier.getPanneauChoixDossier().getjRadioButtonPDF().setEnabled(false);
            cChoixDossier.getPanneauChoixDossier().getjButtonValider().addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

                    if (cChoixDossier.getPanneauChoixDossier().getChoixDossierOK() && cChoixDossier.getPanneauChoixDossier().getFormatFichier() != null && cChoixDossier.getPanneauChoixDossier().getDonneesAExporter() != null) {
                        String cheminFichier = cChoixDossier.getPanneauChoixDossier().getjTextFieldChemin().getText() + "\\export_" + Utilisateur.getIdentifiant() + "_" + Utilitaire.getDate();
                        Boolean resultat = null;

                        List<Integer> id_utilisateurs = new ArrayList<>();

                        if (cChoixDossier.getPanneauChoixDossier().getDonneesAExporter().equals("Compte")) {
                            for (int numeroLigne : jTableInfo.getSelectedRows()) {
                                id_utilisateurs.add(Integer.parseInt(String.valueOf(jTableInfo.getModel().getValueAt(numeroLigne, 0))));
                            }
                        }

                        String extensionFichier = cChoixDossier.getPanneauChoixDossier().getFormatFichier();

                        if (extensionFichier.equals("JSON")) {
                            cheminFichier += ".json";
                            ImportExportJSON objJSON = new ImportExportJSON(cheminFichier, id_utilisateurs, null);
                            resultat = objJSON.exporterFichier();
                        } else if (extensionFichier.equals("XML")) {
                            ImportExportXML objXML = new ImportExportXML(cheminFichier, id_utilisateurs, null);
                            resultat = objXML.exporterFichier();
                        } else if (extensionFichier.equals("CSV")) {
                            ImportExportCSV objCSV = new ImportExportCSV(cheminFichier, id_utilisateurs, null);
                            resultat = objCSV.exporterFichier();
                        }

                        if (resultat != null && resultat) {
                            cChoixDossier.setVisible(false);
                            cChoixDossier.dispose();

                            JOptionPane.showMessageDialog(null,
                                    "Exportation dans le fichier ou les fichiers " + cheminFichier + " réussie",
                                    "Exportation des données",
                                    JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    "Echec de l'exportation, veuillez réessayer",
                                    "Exportation des données",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }

                @Override
                public void mousePressed(MouseEvent e) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            });
            cChoixDossier.setLocationRelativeTo(this);
            cChoixDossier.setModal(true);
            cChoixDossier.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null,
                    "Vous devez sélectionner au moins un compte",
                    "Exportation des données",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonExporterActionPerformed

    private void jButtonImporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImporterActionPerformed
        cChoixFichier = new DialogChoixFichier(this);
        cChoixFichier.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        cChoixFichier.getPanneauChoixFichier().getjButtonValider().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if (cChoixFichier.getPanneauChoixFichier().getChoixFichierOK() && cChoixFichier.getPanneauChoixFichier().getFormatFichier() != null) {
                    cChoixFichier.setVisible(false);
                    cChoixFichier.dispose();

                    String formatFichier = cChoixFichier.getPanneauChoixFichier().getFormatFichier();
                    String cheminFichier = cChoixFichier.getPanneauChoixFichier().getjTextFieldChemin().getText();
                    Boolean resultat = null;
                    List<Map<String, Object>> comptes = null;

                    if (formatFichier.equals("json")) {
                        ImportExportJSON objJSON = new ImportExportJSON(cheminFichier, "compte");
                        resultat = objJSON.importerFichier();
                        if (resultat != null && resultat == true) {
                            comptes = objJSON.getDonneesImporte_Utilisateur();
                        }
                    } else if (formatFichier.equals("xml")) {
                        ImportExportXML objXML = new ImportExportXML(cheminFichier, "compte");
                        resultat = objXML.importerFichier();
                        if (resultat != null && resultat == true) {
                            comptes = objXML.getDonneesImporte_Utilisateur();
                        }
                    } else if (formatFichier.equals("csv")) {
                        ImportExportCSV objCSV = new ImportExportCSV(cheminFichier, "compte");
                        resultat = objCSV.importerFichier();
                        if (resultat != null && resultat == true) {
                            comptes = objCSV.getDonneesImporte_Utilisateur();
                        }
                    }

                    if (resultat != null && resultat == true) {
                        if (comptes != null && comptes.size() > 0) {
                            for (Map compte : comptes) {

                                Boolean presentbdd = false;
                                for (int i = 0; i < jTableInfo.getRowCount(); i++) {
                                    if (String.valueOf(jTableInfo.getValueAt(i, 1)).equals((String) compte.get("identifiant"))) {
                                        presentbdd = true;
                                    }
                                }

                                if (presentbdd) {
                                    cDialogFormModification = new DialogFormModification(PanneauAdministration.this);
                                    cDialogFormModification.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

                                    cDialogFormModification.getPanneauFormModification1().getjLabel1().setText("Importation du compte " + (String) compte.get("identifiant"));
                                    cDialogFormModification.getPanneauFormModification1().getjButton1().setText("Mettre à jour les informations");

                                    cDialogFormModification.getPanneauFormModification1().getPanneauNom().getChamp2().setText((String) compte.get("nom"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauPrenom().getChamp2().setText((String) compte.get("prenom"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauIdentifiant().getChamp2().setText((String) compte.get("identifiant"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauCourriel().getChamp2().setText((String) compte.get("courriel"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauNumeroTelephone().getChamp2().setText((String) compte.get("numeroTelephoneUn"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauDateNaissance().getChamp2().setText((String) compte.get("dateNaissance"));

                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauNumeroTelephoneDeux().getChamp2().setText((String) compte.get("numeroTelephoneDeux"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauSiteWeb().getChamp2().setText((String) compte.get("siteWeb"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauPays().getChamp2().setText((String) compte.get("pays"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauCodePostal().getChamp2().setText((String) compte.get("codePostal"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauVille().getChamp2().setText((String) compte.get("ville"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauNumeroRue().getChamp2().setText((String) compte.get("numeroRue"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauAdresse().getChamp2().setText((String) compte.get("rue"));
                                    cDialogFormModification.getPanneauFormModification1().getPanneauInformationsCompte1().getPanneauInfoComp().getChamp2().setText((String) compte.get("infoComplementaire"));

                                    cDialogFormModification.getPanneauFormModification1().updateAllJLabelEtat();

                                    cDialogFormModification.getPanneauFormModification1().getjButton1().addMouseListener(new MouseListener() {
                                        @Override
                                        public void mouseClicked(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                            if (cDialogFormModification.getPanneauFormModification1().getModificationOK()) {
                                                if (cDialogFormModification.getPanneauFormModification1().updateBDD()) {
                                                    cDialogFormModification.dispose();
                                                    cDialogFormModification.setVisible(false);
                                                    updateJTableInfo();
                                                } else {
                                                    JOptionPane.showMessageDialog(null,
                                                            "Echec de l'importation dans la base de données, veuillez réessayer",
                                                            "Importation du fichier",
                                                            JOptionPane.ERROR_MESSAGE);
                                                }

                                            }
                                        }

                                        @Override
                                        public void mousePressed(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseReleased(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseEntered(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseExited(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }
                                    });

                                    cDialogFormModification.setLocationRelativeTo(PanneauAdministration.this);
                                    cDialogFormModification.setModal(true);
                                    cDialogFormModification.setVisible(true);
                                } else {
                                    cDialogFormInscriptionv2 = new DialogFormInscriptionv2(PanneauAdministration.this);
                                    cDialogFormInscriptionv2.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getjLabel1().setText("Importation du compte " + (String) compte.get("identifiant"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getjButton1().setText("Confirmer l'inscription");

                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauNom().getChamp2().setText((String) compte.get("nom"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauPrenom().getChamp2().setText((String) compte.get("prenom"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauIdentifiant().getChamp2().setText((String) compte.get("identifiant"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauCourriel().getChamp2().setText((String) compte.get("courriel"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauNumeroTelephone().getChamp2().setText((String) compte.get("numeroTelephoneUn"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauDateNaissance().getChamp2().setText((String) compte.get("dateNaissance"));

                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauNumeroTelephoneDeux().getChamp2().setText((String) compte.get("numeroTelephoneDeux"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauSiteWeb().getChamp2().setText((String) compte.get("siteWeb"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauPays().getChamp2().setText((String) compte.get("pays"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauCodePostal().getChamp2().setText((String) compte.get("codePostal"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauVille().getChamp2().setText((String) compte.get("ville"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauNumeroRue().getChamp2().setText((String) compte.get("numeroRue"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauAdresse().getChamp2().setText((String) compte.get("rue"));
                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getPanneauInformationsCompte1().getPanneauInfoComp().getChamp2().setText((String) compte.get("infoComplementaire"));

                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().updateAllJLabelEtat();

                                    cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getjButton1().addMouseListener(new MouseListener() {
                                        @Override
                                        public void mouseClicked(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                            if (cDialogFormInscriptionv2.getPanneauFormInscriptionv2().getInscriptionOK()) {
                                                cDialogFormInscriptionv2.dispose();
                                                cDialogFormInscriptionv2.setVisible(false);
                                                updateJTableInfo();
                                            }
                                        }

                                        @Override
                                        public void mousePressed(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseReleased(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseEntered(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }

                                        @Override
                                        public void mouseExited(MouseEvent e) {
//                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                                        }
                                    });

                                    cDialogFormInscriptionv2.setLocationRelativeTo(PanneauAdministration.this);
                                    cDialogFormInscriptionv2.setModal(true);
                                    cDialogFormInscriptionv2.setVisible(true);
                                }
                            }

                            JOptionPane.showMessageDialog(null,
                                    "Importation du fichier réussi",
                                    "Importation du fichier",
                                    JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    "Echec de l'importation",
                                    "Importation du fichier",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Echec de l'importation, mauvais format du fichier",
                                "Importation du fichier",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        cChoixFichier.setLocationRelativeTo(this);
        cChoixFichier.setModal(true);
        cChoixFichier.setVisible(true);
    }//GEN-LAST:event_jButtonImporterActionPerformed

    public void updateJTableInfo() {
        try {
            //Création d'une variable stockant les colonnes et lignes
            DefaultTableModel modele = new DefaultTableModel(this.data_test, this.entetes);
            //Suppression des lignes
            modele.removeRow(0);
            //Connexion de la table à la BDD pour selectionner toutes les données
            ResultSet lesResultats = DaoSIO.getInstance().requeteSelection("SELECT id, identifiant, nom, prenom, courriel, num_telephone, num_telephone_deux FROM utilisateurs ORDER BY utilisateurs.id ASC");
            while (lesResultats.next()) {
                String num_telephone_deux;

                if (!lesResultats.getString("num_telephone_deux").equals("")) {
                    num_telephone_deux = lesResultats.getString("num_telephone_deux");
                } else {
                    num_telephone_deux = "/";
                }

                modele.addRow(new Object[]{lesResultats.getString("id"), lesResultats.getString("identifiant"), lesResultats.getString("nom"), lesResultats.getString("prenom"), lesResultats.getString("courriel"), lesResultats.getString("num_telephone"), num_telephone_deux});
            }

            //Envoie des données à notre tableau
            jTableInfo.setModel(modele);
        } catch (SQLException ex) {
            Logger.getLogger(PanneauAdministration.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String[][] requeteSelectAll(String sql) {
        try {
            ResultSet lesResultats = DaoSIO.getInstance().requeteSelection(sql);
            Integer nbLignes = null;
            Integer nbColonnes = lesResultats.getMetaData().getColumnCount();
            Integer compteurLignes = 0;

            if (lesResultats.last()) {
                nbLignes = lesResultats.getRow();
                lesResultats.beforeFirst();
            }

            String[][] resultat = new String[nbLignes][nbColonnes];
            while (lesResultats.next()) {
                for (int i = 1; i <= nbColonnes; i++) {
                    if (i != 4 && i != 10) {
                        resultat[compteurLignes][i - 1] = lesResultats.getString(i);
                    }

                }
                compteurLignes++;
            }

            return resultat;
        } catch (SQLException ex) {
            Logger.getLogger(DaoSIO.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreerUtilisateur;
    private javax.swing.JButton jButtonExporter;
    private javax.swing.JButton jButtonImporter;
    private javax.swing.JButton jButtonModifierUtilisateur;
    private javax.swing.JButton jButtonRafraichir;
    private javax.swing.JButton jButtonSuppToutUtilisateurs;
    private javax.swing.JButton jButtonSuppUtilisateur;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableInfo;
    // End of variables declaration//GEN-END:variables
}
