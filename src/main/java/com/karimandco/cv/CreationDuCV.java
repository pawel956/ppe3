/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karimandco.cv;

import com.karimandco.auth.Utilisateur;
import com.karimandco.bdd.DaoSIO;
import com.pradyna.components.choixfichier.DialogChoixFichier;
import com.pradyna.components.importexport.ImportExportCSV;
import com.pradyna.components.importexport.ImportExportJSON;
import com.pradyna.components.importexport.ImportExportXML;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JSpinner;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;

/**
 *
 * @author Sarah
 */
public class CreationDuCV extends javax.swing.JPanel {

    public com.pradyna.components.choixfichier.DialogChoixFichier cChoixFichier;

    public Integer idUtilisateur;
    private Integer idTabFormation = 1;
    private Integer idTabExperiencePro = 1;
    private Integer idTabInfoComp = 1;
    private Integer idCV = null;

    private List<Integer> tabIdCVs;

    /**
     * Creates new form CreationDuCV
     */
    public CreationDuCV(Integer idCV, Integer idUtilisateur) {
        initComponents();
        this.idUtilisateur = idUtilisateur;
        this.idCV = idCV;

        try {
            chargerCV();
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public CreationDuCV() {
        this(null, 1);
    }

    public Integer getIdUtilisateur() {
        return idUtilisateur;
    }

    public void setIdUtilisateur(Integer idUtilisateur) {
        this.idUtilisateur = idUtilisateur;
        try {
            chargerCV();
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Integer getIdCV() {
        return idCV;
    }

    public void setIdCV(Integer idCV) {
        this.idCV = idCV;
        try {
            chargerCV();
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitrePrincipal = new javax.swing.JLabel();
        jLabelTitre = new javax.swing.JLabel();
        jTextFieldTitre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPaneFormation = new javax.swing.JTabbedPane();
        jLabel4 = new javax.swing.JLabel();
        jTabbedPaneExperiencePro = new javax.swing.JTabbedPane();
        jLabelDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDescription = new javax.swing.JTextArea();
        jButtonValidationCV = new javax.swing.JButton();
        jLabelMaitrise = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldMaitrise1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButtonValideFormation = new javax.swing.JButton();
        jButtonValideExperiencePro = new javax.swing.JButton();
        jButtonSupprimeCV = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldMaitrise2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jSpinnerLevelMaitrise1 = new javax.swing.JSpinner();
        jSpinnerLevelMaitrise2 = new javax.swing.JSpinner();
        jComboBoxListeCVs = new javax.swing.JComboBox<>();
        jTabbedPaneInformationsComp = new javax.swing.JTabbedPane();
        jLabel7 = new javax.swing.JLabel();
        jButtonValideInfoComp = new javax.swing.JButton();
        jButtonNouveauCV = new javax.swing.JButton();
        jButtonImportCV = new javax.swing.JButton();

        jLabelTitrePrincipal.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabelTitrePrincipal.setText("Création de votre CV");

        jLabelTitre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelTitre.setText("Titre du CV");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Vos formations");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Vos exprérience professionnel");

        jLabelDescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDescription.setText("Description CV");

        jTextAreaDescription.setColumns(20);
        jTextAreaDescription.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDescription);

        jButtonValidationCV.setText("Validation création du CV");
        jButtonValidationCV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValidationCVMouseClicked(evt);
            }
        });

        jLabelMaitrise.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabelMaitrise.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelMaitrise.setText("Maitrise");

        jLabel2.setText("Maitrise 1  :");

        jTextFieldMaitrise1.setText("Titre de la maitrise");

        jButtonValideFormation.setText("Ajouter une autre formation au CV");
        jButtonValideFormation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValideFormationMouseClicked(evt);
            }
        });

        jButtonValideExperiencePro.setText("Ajouter une autre expérience professionnelle au CV");
        jButtonValideExperiencePro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonValideExperienceProMouseClicked(evt);
            }
        });

        jButtonSupprimeCV.setText("x");
        jButtonSupprimeCV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSupprimeCVMouseClicked(evt);
            }
        });

        jLabel1.setText("%");

        jTextFieldMaitrise2.setText("Titre de la maitrise");

        jLabel5.setText("%");

        jLabel6.setText("Maitrise 2  :");

        jSpinnerLevelMaitrise1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        jSpinnerLevelMaitrise1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLevelMaitrise1StateChanged(evt);
            }
        });
        jSpinnerLevelMaitrise1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jSpinnerLevelMaitrise1InputMethodTextChanged(evt);
            }
        });

        jSpinnerLevelMaitrise2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        jSpinnerLevelMaitrise2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerLevelMaitrise2StateChanged(evt);
            }
        });
        jSpinnerLevelMaitrise2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jSpinnerLevelMaitrise2InputMethodTextChanged(evt);
            }
        });

        jComboBoxListeCVs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxListeCVsItemStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Vos informations complémentaires");

        jButtonValideInfoComp.setText("Ajouter une autre catégorie au CV");
        jButtonValideInfoComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValideInfoCompActionPerformed(evt);
            }
        });

        jButtonNouveauCV.setText("Nouveau CV");
        jButtonNouveauCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNouveauCVActionPerformed(evt);
            }
        });

        jButtonImportCV.setText("Importer un CV");
        jButtonImportCV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImportCVActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBoxListeCVs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelTitrePrincipal)
                        .addGap(355, 355, 355)
                        .addComponent(jButtonImportCV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNouveauCV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSupprimeCV))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonValideFormation, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonValideExperiencePro, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                    .addComponent(jTabbedPaneFormation, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTabbedPaneExperiencePro, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jProgressBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(18, 18, 18)
                                            .addComponent(jTextFieldMaitrise2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jSpinnerLevelMaitrise2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(0, 0, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabelMaitrise, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jTextFieldMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jSpinnerLevelMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel8)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButtonValideInfoComp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jTabbedPaneInformationsComp, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))))))
                        .addContainerGap(30, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonValidationCV, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(301, 301, 301))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelTitre)
                                .addGap(701, 701, 701))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextFieldTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(418, 418, 418))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitrePrincipal)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSupprimeCV)
                        .addComponent(jButtonNouveauCV)
                        .addComponent(jButtonImportCV))
                    .addComponent(jComboBoxListeCVs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabelTitre)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabelDescription)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelMaitrise)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldMaitrise1)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSpinnerLevelMaitrise1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldMaitrise2)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSpinnerLevelMaitrise2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPaneFormation, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPaneExperiencePro, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPaneInformationsComp, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonValideInfoComp)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonValideFormation)
                    .addComponent(jButtonValideExperiencePro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonValidationCV, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt
     */
    private void jButtonValidationCVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValidationCVMouseClicked
        int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir enregistrer votre Curriculum Vitae.", "Confirmez l'enregistrement", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            createCV();
        } else {
            // Message si NON
        }
    }//GEN-LAST:event_jButtonValidationCVMouseClicked

    /**
     * Méthode permettant de rajouter des formations.
     *
     * @param evt
     */
    private void jButtonValideFormationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValideFormationMouseClicked
        Formation formation = new Formation();
        jTabbedPaneFormation.addTab("Formation " + idTabFormation, formation);
        this.onSupprimeFormation(formation);
        idTabFormation++;
    }//GEN-LAST:event_jButtonValideFormationMouseClicked
    /**
     * Méthode permettant de rajouter des expériences pro.
     *
     * @param evt
     */
    private void jButtonValideExperienceProMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonValideExperienceProMouseClicked
        ExperiencePro experiencePro = new ExperiencePro();
        jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, experiencePro);
        this.onSupprimeExperiencePro(experiencePro);
        idTabExperiencePro++;
    }//GEN-LAST:event_jButtonValideExperienceProMouseClicked

    /**
     * Methode d'événement pour gérer la suppression de cv.
     *
     * @param evt
     */
    private void jButtonSupprimeCVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSupprimeCVMouseClicked
        int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer ce Curriculum Vitae.", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            // JOptionPane.showMessageDialog(CreationDuCV.this, "Bravo ! les pancakes xDD");

            // Ici, il va falloir exécuter la suppression du cv
            // et puis quand ça sera fait on peut supprimé toutes les formations et les expériences pro du CV
            try {
                if (this.idCV != null) {

                    boolean okExperiencePro = true;
                    boolean okFormation = true;
                    boolean okInfoComp = true;
                    for (int i = 0; i < jTabbedPaneExperiencePro.getTabCount(); i++) {
                        ExperiencePro panelExperiencePro = (ExperiencePro) jTabbedPaneExperiencePro.getComponentAt(i);
                        okExperiencePro = this.supprimerExperiencePro(panelExperiencePro.getIdExperiencePro());
                    }
                    for (int i = 0; i < jTabbedPaneFormation.getTabCount(); i++) {
                        Formation panelFormation = (Formation) jTabbedPaneFormation.getComponentAt(i);
                        okFormation = this.supprimerFormation(panelFormation.getIdFormation());
                    }
                    for (int i = 0; i < jTabbedPaneInformationsComp.getTabCount(); i++) {
                        InformationComp infoComp = (InformationComp) jTabbedPaneInformationsComp.getComponentAt(i);
                        okInfoComp = this.supprimerInfoComp(infoComp.getIdInfoComp());
                    }

                    if (okExperiencePro && okFormation && okInfoComp) {
                        if (this.supprimerCV(idCV)) {
                            this.idCV = null;
                            this.chargerCV();
                            JOptionPane.showMessageDialog(this, "Curriculum Vitae a été supprimé avec succès.", "Curriculum Vitae supprimé", JOptionPane.INFORMATION_MESSAGE);
                            updateJComboBoxListeCVs();
                        } else {
                            JOptionPane.showMessageDialog(CreationDuCV.this, "Erreur ! Curriculum Vitae non supprimé");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Vous ne possédé aucun Curriculum Vitae.", "Information - Curriculum Vitae", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // Message si NON
        }
    }//GEN-LAST:event_jButtonSupprimeCVMouseClicked

    private void jSpinnerLevelMaitrise1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLevelMaitrise1StateChanged
        handleMaitrise(jSpinnerLevelMaitrise1, jProgressBar1);
    }//GEN-LAST:event_jSpinnerLevelMaitrise1StateChanged

    private void jSpinnerLevelMaitrise1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinnerLevelMaitrise1InputMethodTextChanged
        handleMaitrise(jSpinnerLevelMaitrise1, jProgressBar1);
    }//GEN-LAST:event_jSpinnerLevelMaitrise1InputMethodTextChanged

    private void jSpinnerLevelMaitrise2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerLevelMaitrise2StateChanged
        handleMaitrise(jSpinnerLevelMaitrise2, jProgressBar2);
    }//GEN-LAST:event_jSpinnerLevelMaitrise2StateChanged

    private void jSpinnerLevelMaitrise2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinnerLevelMaitrise2InputMethodTextChanged
        handleMaitrise(jSpinnerLevelMaitrise2, jProgressBar2);
    }//GEN-LAST:event_jSpinnerLevelMaitrise2InputMethodTextChanged

    private void jComboBoxListeCVsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxListeCVsItemStateChanged
//        String idCv = (String) jComboBoxListeCVs.getSelectedItem();
        //        Matcher m = Pattern.compile("\\((.*?)\\)").matcher(idCv);
        //        while (m.find()) {
        //            setIdCV(Integer.valueOf(m.group(1)));
        //        }
        String item = (String) jComboBoxListeCVs.getSelectedItem();
        if (item != null) {
            Integer numeroCv = Integer.valueOf(item.split("°")[1]) - 1;
            setIdCV(this.tabIdCVs.get(numeroCv));
        }
    }//GEN-LAST:event_jComboBoxListeCVsItemStateChanged

    private void jButtonValideInfoCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValideInfoCompActionPerformed
        InformationComp informationComp = new InformationComp();
        jTabbedPaneInformationsComp.addTab("Informations comp " + idTabInfoComp, informationComp);
        this.onSupprimeInfoComp(informationComp);
        idTabInfoComp++;
    }//GEN-LAST:event_jButtonValideInfoCompActionPerformed

    private void jButtonNouveauCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNouveauCVActionPerformed
        this.setIdCV(null);
    }//GEN-LAST:event_jButtonNouveauCVActionPerformed

    private void jButtonImportCVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImportCVActionPerformed
        cChoixFichier = new DialogChoixFichier(this);
        cChoixFichier.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        cChoixFichier.getPanneauChoixFichier().getjButtonValider().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if (cChoixFichier.getPanneauChoixFichier().getChoixFichierOK() && cChoixFichier.getPanneauChoixFichier().getFormatFichier() != null) {
                    cChoixFichier.setVisible(false);
                    cChoixFichier.dispose();

                    String formatFichier = cChoixFichier.getPanneauChoixFichier().getFormatFichier();
                    String cheminFichier = cChoixFichier.getPanneauChoixFichier().getjTextFieldChemin().getText();
                    Boolean resultat = null;
                    List<Map<String, Object>> cv = null;
                    List<Map<String, Object>> experiencePro = null;
                    List<Map<String, Object>> formation = null;
                    List<Map<String, Object>> infoComp = null;

                    if (formatFichier.equals("json")) {
                        ImportExportJSON objJSON = new ImportExportJSON(cheminFichier, "cv");
                        resultat = objJSON.importerFichier();
                        if (resultat != null && resultat == true) {
                            cv = objJSON.getDonneesImporte_Cv();
                            experiencePro = objJSON.getDonneesImporte_ExperiencePro();
                            formation = objJSON.getDonneesImporte_Formation();
                            infoComp = objJSON.getDonneesImporte_InformationsComp();
                        }
                    } else if (formatFichier.equals("xml")) {
                        ImportExportXML objXML = new ImportExportXML(cheminFichier, "cv");
                        resultat = objXML.importerFichier();
                        if (resultat != null && resultat == true) {
                            cv = objXML.getDonneesImporte_Cv();
                            experiencePro = objXML.getDonneesImporte_ExperiencePro();
                            formation = objXML.getDonneesImporte_Formation();
                            infoComp = objXML.getDonneesImporte_InformationsComp();
                        }
                    } else if (formatFichier.equals("csv")) {
                        ImportExportCSV objCSV = new ImportExportCSV(cheminFichier, "cv");
                        resultat = objCSV.importerFichier();
                        if (resultat != null && resultat == true) {
                            cv = objCSV.getDonneesImporte_Cv();
                            experiencePro = objCSV.getDonneesImporte_ExperiencePro();
                            formation = objCSV.getDonneesImporte_Formation();
                            infoComp = objCSV.getDonneesImporte_InformationsComp();
                        }
                    }

                    if (resultat != null && resultat == true) {
                        if (cv != null && cv.size() > 0) {
                            setIdCV(null);

                            idTabExperiencePro = 1;
                            idTabFormation = 1;
                            idTabInfoComp = 1;

                            jTextFieldTitre.setText((String) cv.get(0).get("titre"));
                            jTextAreaDescription.setText((String) cv.get(0).get("description"));
                            jProgressBar1.setValue(Integer.parseInt((String) cv.get(0).get("maitriseValeur")));
                            jSpinnerLevelMaitrise1.setValue(Integer.parseInt((String) cv.get(0).get("maitriseValeur")));
                            jTextFieldMaitrise1.setText((String) cv.get(0).get("maitriseNom"));

                            // Je récupère l'id du cv et je le stocke dans une variable privé de la class
                            idCV = Integer.valueOf((String) cv.get(0).get("id"));

                            jTabbedPaneFormation.removeAll();
                            jTabbedPaneExperiencePro.removeAll();
                            jTabbedPaneInformationsComp.removeAll();

                            if (formation != null && formation.size() > 0) {
                                for (int i = 0; i < formation.size(); i++) {
                                    Map<String, Object> formationData;
                                    formationData = formation.get(i);

                                    Formation formation1 = new Formation();

                                    formation1.setIdFormation(Integer.valueOf((String) formationData.get("id")));
                                    formation1.setIdCV(Integer.valueOf((String) cv.get(0).get("id")));
                                    formation1.setIdTab(idTabFormation);
                                    formation1.getjTextFieldNomFormation().setText((String) formationData.get("nom"));
                                    formation1.getjTextFieldAdresseFormation().setText((String) formationData.get("lieu"));
                                    formation1.getjTextAreaDescriptionFormation().setText((String) formationData.get("description"));

                                    String[] date_debut_split = ((String) formationData.get("annee_debut").toString()).split("/");
                                    String[] date_fin_split = ((String) formationData.get("annee_fin").toString()).split("/");

                                    formation1.getClassDate1().setText(date_debut_split[2] + "-" + date_debut_split[1] + "-" + date_debut_split[0]);
                                    formation1.getClassDate2().setText(date_fin_split[2] + "-" + date_fin_split[1] + "-" + date_fin_split[0]);

                                    onSupprimeFormation(formation1);

                                    jTabbedPaneFormation.addTab("Formation " + idTabFormation, formation1);
                                    idTabFormation++;
                                }
                            }

                            if (experiencePro != null && experiencePro.size() > 0) {
                                for (int j = 0; j < experiencePro.size(); j++) {
                                    Map<String, Object> experienceProData;
                                    experienceProData = experiencePro.get(j);

                                    ExperiencePro experiencePro1 = new ExperiencePro();

                                    experiencePro1.setIdExperiencePro(Integer.valueOf((String) experienceProData.get("id")));
                                    experiencePro1.setIdCV(Integer.valueOf((String) cv.get(0).get("id")));
                                    experiencePro1.setIdTab(idTabExperiencePro);
                                    experiencePro1.getjTextFieldNomEntpExpPro().setText((String) experienceProData.get("entreprise"));
                                    experiencePro1.getjTextFieldAdresseExpPro().setText((String) experienceProData.get("lieu"));
                                    experiencePro1.getjTextAreaDescriptionExpPro().setText((String) experienceProData.get("description"));

                                    String[] date_debut_split = ((String) experienceProData.get("annee_debut").toString()).split("/");
                                    String[] date_fin_split = ((String) experienceProData.get("annee_fin").toString()).split("/");

                                    experiencePro1.getClassDate1().setText(date_debut_split[2] + "-" + date_debut_split[1] + "-" + date_debut_split[0]);
                                    experiencePro1.getClassDate2().setText(date_fin_split[2] + "-" + date_fin_split[1] + "-" + date_fin_split[0]);

                                    onSupprimeExperiencePro(experiencePro1);

                                    jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, experiencePro1);
                                    idTabExperiencePro++;
                                }
                            }

                            if (infoComp != null && infoComp.size() > 0) {
                                for (int k = 0; k < infoComp.size(); k++) {
                                    Map<String, Object> infoCompData;
                                    infoCompData = infoComp.get(k);

                                    InformationComp informationComp1 = new InformationComp();

                                    informationComp1.setIdInfoComp(Integer.valueOf((String) infoCompData.get("id")));
                                    informationComp1.setIdCV(Integer.valueOf((String) cv.get(0).get("id")));
                                    informationComp1.setIdTab(idTabInfoComp);
                                    informationComp1.getjTextFieldIntitulePartie().setText((String) infoCompData.get("intitule"));
                                    informationComp1.getjTextAreaDescription().setText((String) infoCompData.get("description"));

                                    onSupprimeInfoComp(informationComp1);

                                    jTabbedPaneInformationsComp.addTab("Informations comp " + idTabInfoComp, informationComp1);
                                    idTabInfoComp++;
                                }
                            }

                            JOptionPane.showMessageDialog(null,
                                    "Importation réussie, veuillez confirmer pour mettre à jour les informations",
                                    "Importation du fichier",
                                    JOptionPane.INFORMATION_MESSAGE);

                            jButtonValidationCV.setText("Mettre à jour le CV");
                            jLabelTitrePrincipal.setText("Mise à jour de votre cv");
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    "Echec de l'importation, mauvais format du fichier",
                                    "Importation du fichier",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Echec de l'importation, mauvais format du fichier",
                                "Importation du fichier",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        cChoixFichier.setLocationRelativeTo(this);
        cChoixFichier.setModal(true);
        cChoixFichier.setVisible(true);


    }//GEN-LAST:event_jButtonImportCVActionPerformed

    /**
     * Permet de capturer les évenements touche relaché du champs de saisie
     * Maitrise 1 et rajouter la valeur correspondante dans la progresse bar.
     *
     * @param evt
     */
    private void handleMaitrise(JSpinner jSpinner, JProgressBar jProgressBar) {
        String value = jSpinner.getValue().equals("") ? "0" : jSpinner.getValue().toString();

        if (value.matches("[0-9]+")) {
            if (!value.equals("") && Integer.parseInt(value) >= 0 && Integer.parseInt(value) <= 100) {
                jProgressBar.setValue(Integer.parseInt(value));
            }
        }
//        System.out.println(jProgressBar.getValue());
    }

    /**
     * Permet de créer/insérer les données du cv dans la base de donnée cv.
     */
    public void createCV() {

        boolean update = false;

        List<Map<String, Object>> cv = null;
        try {
            cv = getCV(this.idCV, this.idUtilisateur);
            if (cv != null && cv.size() > 0) {
                update = true;
            }
        } catch (SQLException ex) {
        }

        Integer res = null;

        try {
            // Ici mettre l'id de l'uilisateur
            List<Map<String, Object>> utilisateur = getUtilisateur(idUtilisateur);

            if (utilisateur != null && utilisateur.size() > 0) {
                String titre = jTextFieldTitre.getText();
                if (!titre.equals("")) {

                    String description = jTextAreaDescription.getText();

                    if (!description.equals("")) {

                        int maitrise = jProgressBar1.getValue();
                        String nom_maitrise = jTextFieldMaitrise1.getText();

                        if (!nom_maitrise.equals("") && !nom_maitrise.equals("Titre de la maitrise")) {

                            Integer idUtilisateur = (Integer) utilisateur.get(0).get("id");
                            String signature = utilisateur.get(0).get("nom").toString().toUpperCase() + " " + utilisateur.get(0).get("nom").toString();
                            Integer idCV = null;

                            if (update) {
                                res = DaoSIO
                                        .getInstance()
                                        .requeteAction("UPDATE `cv` SET `titre` = '" + titre + "', `description` = '" + description + "', `nom_maitrise` = '" + nom_maitrise + "',`maitrise` = '" + maitrise + "' WHERE id = " + cv.get(0).get("id"));

                                idCV = (Integer) cv.get(0).get("id");
                            } else {
                                res = DaoSIO
                                        .getInstance()
                                        .requeteAction("INSERT INTO `cv` (`id`, `titre`, `description`, `signature`, `nom_maitrise`, `maitrise`, `id_utilisateur`) "
                                                + "VALUES (NULL, '" + titre + "', '" + description + "', '" + signature + "', '" + nom_maitrise + "', '" + maitrise + "', '" + idUtilisateur + "');");

                                // Ici, on récupère le id du dernière occurences insérer dans la table cv
                                idCV = DaoSIO.getInstance().getLastID("cv", "id");

                                // Je récupère l'id du cv lors de ça création et je le stocke dans une variable privé de la class
                                this.idCV = idCV;
                            }

                            if (this.sauvegardeToutForamtion(idCV) && this.sauvegardeToutExperiencePro(idCV) && this.sauvegardeToutInformationsComp(idCV)) {
                                if (res != null) {
                                    JOptionPane.showMessageDialog(this,
                                            update ? "Curriculum Vitae a été mise à jour avec succès." : "Curriculum Vitae a été créé avec succès.",
                                            update ? "Mise à jour Curriculum Vitae" : "Création Curriculum Vitae",
                                            JOptionPane.INFORMATION_MESSAGE);

                                    if (!update) {
                                        updateJComboBoxListeCVs();
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Une erreur a été détecté lors de la création de votre CV veuillez réessayer.\n"
                                            + "Si le problème persistent veuillez réessayer ultérieurement", "Curriculum Vitae non créé", JOptionPane.WARNING_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Une erreur s'est produite lors de l'enregistrement de vos formations ou de vos expérience professionnel ou de vos informations complémentaires.", "Error..", JOptionPane.ERROR_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "Veuillez saisir le nom de la catégorie à votre maitrise.");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Veuillez saisir une description à votre Curriculum Vitae.");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Il faut impérativement un titre à votre Curriculum Vitae.");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Vous n'êtes pas un utilisateur valide.");
            }
        } catch (SQLException ex) {
            Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Elle permet d'appeler la méthode qui permet d'enregistrer les
     * informations de la formation de chaque panel qui est contenu dans
     * "jTabbedPaneFormation". Elle renvoie "true" ou "false" si il y a eu une
     * erreur ou pas.
     *
     * @param args
     * @return boolean
     */
    public boolean sauvegardeToutForamtion(Integer... args) {
        Integer idCV = args[0];
        Boolean erreur = true;
        for (int i = 0; i < jTabbedPaneFormation.getTabCount(); i++) {
            Formation panelFormation = (Formation) jTabbedPaneFormation.getComponentAt(i);
            erreur = panelFormation.setEnvoieFormation(idCV) == null ? false : true;
            if (erreur) {
                this.onSupprimeFormation(panelFormation);
            }
        }
        return erreur;
    }

    /**
     * Elle permet d'appeler la méthode qui permet d'enregistrer les
     * informations de l'expérience professionnelle de chaque panel qui est
     * contenu dans "jTabbedPaneExperiencePro". Elle renvoie "true" ou "false"
     * si il y a eu une erreur ou pas.
     *
     * @param args
     * @return boolean
     */
    public boolean sauvegardeToutExperiencePro(Integer... args) {
        Integer idCV = args[0];
        Boolean erreur = true;
        for (int i = 0; i < jTabbedPaneExperiencePro.getTabCount(); i++) {
            ExperiencePro panelExperiencePro = (ExperiencePro) jTabbedPaneExperiencePro.getComponentAt(i);
            erreur = panelExperiencePro.setEnvoieExperiencePro(idCV) == null ? false : true;
            if (erreur) {
                this.onSupprimeExperiencePro(panelExperiencePro);
            }
        }
        return erreur;
    }

    /**
     * Elle permet d'appeler la méthode qui permet d'enregistrer les
     * informations de l'information comp de chaque panel qui est contenu dans
     * "jTabbedPaneInformationsComp". Elle renvoie "true" ou "false" si il y a
     * eu une erreur ou pas.
     *
     * @param args
     * @return boolean
     */
    public boolean sauvegardeToutInformationsComp(Integer... args) {
        Integer idCV = args[0];
        Boolean erreur = true;
        for (int i = 0; i < jTabbedPaneInformationsComp.getTabCount(); i++) {
            InformationComp panelInformationsComp = (InformationComp) jTabbedPaneInformationsComp.getComponentAt(i);
            erreur = panelInformationsComp.setEnvoieInformationComp(idCV) == null ? false : true;
//            if (erreur) {
//                this.onSupprimeExperiencePro(panelInformationsComp);
//            }
        }
        return erreur;
    }

    /**
     * Permet d'auto charger un cv avec tous les formations et toutes les
     * expériences professionnelles, si il en existe un dans la base de donnée.
     * Cette méthode possède aussi des conditions qui permettent d'initialiser
     * les panels si aucun CV n'a été créé.
     *
     * @throws SQLException
     */
    public void chargerCV() throws SQLException {
        List<Map<String, Object>> utilisateur = getUtilisateur(idUtilisateur), cv = getCV(this.idCV, this.idUtilisateur), formation = getFormation(idUtilisateur), experiencePro = getExperiencePro(idUtilisateur), infoComp = getInformationsComp(idUtilisateur);
        idTabExperiencePro = 1;
        idTabFormation = 1;
        idTabInfoComp = 1;

        if (utilisateur != null) {

            if (cv != null && cv.size() > 0) {
                jTextFieldTitre.setText((String) cv.get(0).get("titre"));
                jTextAreaDescription.setText((String) cv.get(0).get("description"));
                jProgressBar1.setValue(Integer.parseInt((String) cv.get(0).get("maitrise")));
                jSpinnerLevelMaitrise1.setValue(Integer.parseInt((String) cv.get(0).get("maitrise")));
                jTextFieldMaitrise1.setText((String) cv.get(0).get("nom_maitrise"));

                // Je récupère l'id du cv et je le stocke dans une variable privé de la class
                this.idCV = (Integer) cv.get(0).get("id");

                jTabbedPaneFormation.removeAll();
                jTabbedPaneExperiencePro.removeAll();
                jTabbedPaneInformationsComp.removeAll();

                if (formation != null && formation.size() > 0) {

                    for (int i = 0; i < formation.size(); i++) {
                        Map<String, Object> formationData;
                        formationData = formation.get(i);

                        Formation formation1 = new Formation();

                        formation1.setIdFormation((Integer) formationData.get("id"));
                        formation1.setIdCV((Integer) formationData.get("id_cv"));
                        formation1.setIdTab(idTabFormation);
                        formation1.getjTextFieldNomFormation().setText((String) formationData.get("nom"));
                        formation1.getjTextFieldAdresseFormation().setText((String) formationData.get("lieu"));
                        formation1.getjTextAreaDescriptionFormation().setText((String) formationData.get("description"));
                        formation1.getClassDate1().setText((String) formationData.get("annee_debut").toString());
                        formation1.getClassDate2().setText((String) formationData.get("annee_fin").toString());

                        this.onSupprimeFormation(formation1);

                        jTabbedPaneFormation.addTab("Formation " + idTabFormation, formation1);
                        idTabFormation++;
                    }
                }

                if (experiencePro != null && experiencePro.size() > 0) {
                    for (int j = 0; j < experiencePro.size(); j++) {
                        Map<String, Object> experienceProData;
                        experienceProData = experiencePro.get(j);

                        ExperiencePro experiencePro1 = new ExperiencePro();

                        experiencePro1.setIdExperiencePro((Integer) experienceProData.get("id"));
                        experiencePro1.setIdCV((Integer) experienceProData.get("id_cv"));
                        experiencePro1.setIdTab(idTabExperiencePro);
                        experiencePro1.getjTextFieldNomEntpExpPro().setText((String) experienceProData.get("entreprise"));
                        experiencePro1.getjTextFieldAdresseExpPro().setText((String) experienceProData.get("adresse"));
                        experiencePro1.getjTextAreaDescriptionExpPro().setText((String) experienceProData.get("description"));
                        experiencePro1.getClassDate1().setText((String) experienceProData.get("annee_debut").toString());
                        experiencePro1.getClassDate2().setText((String) experienceProData.get("annee_fin").toString());

                        this.onSupprimeExperiencePro(experiencePro1);

                        jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, experiencePro1);
                        idTabExperiencePro++;
                    }
                }

                if (infoComp != null && infoComp.size() > 0) {
                    for (int j = 0; j < infoComp.size(); j++) {
                        Map<String, Object> infoCompData;
                        infoCompData = infoComp.get(j);

                        InformationComp informationComp1 = new InformationComp();

                        informationComp1.setIdInfoComp((Integer) infoCompData.get("id"));
                        informationComp1.setIdCV((Integer) infoCompData.get("id_cv"));
                        informationComp1.setIdTab(idTabInfoComp);
                        informationComp1.getjTextFieldIntitulePartie().setText((String) infoCompData.get("intitule"));
                        informationComp1.getjTextAreaDescription().setText((String) infoCompData.get("description"));

                        this.onSupprimeInfoComp(informationComp1);

                        jTabbedPaneInformationsComp.addTab("Informations comp " + idTabInfoComp, informationComp1);
                        idTabInfoComp++;
                    }
                }

                jButtonValidationCV.setText("Mettre à jour le CV");
                jLabelTitrePrincipal.setText("Mise à jour de votre cv");
            } else if (cv == null || cv.size() == 0) {
                jTabbedPaneFormation.removeAll();
                jTabbedPaneExperiencePro.removeAll();
                jTabbedPaneInformationsComp.removeAll();

                jTextFieldTitre.setText("");
                jTextAreaDescription.setText("");

                jSpinnerLevelMaitrise1.setValue(0);
                jProgressBar1.setValue(0);
                jTextFieldMaitrise1.setText("Titre de la maitrise");
            }

            // ces conditions permettent d'initialiser les panels si aucun CV n'a été créé
            if (formation == null || formation.size() == 0) {
                jTabbedPaneFormation.addTab("Formation " + idTabFormation, new Formation());
                idTabFormation++;
            }

            if (experiencePro == null || experiencePro.size() == 0) {
                jTabbedPaneExperiencePro.addTab("Expérience Pro " + idTabExperiencePro, new ExperiencePro());
                idTabExperiencePro++;
            }

            if (infoComp == null || infoComp.size() == 0) {
                jTabbedPaneInformationsComp.addTab("Informations comp " + idTabInfoComp, new InformationComp());
                idTabInfoComp++;
            }
        }

    }

    /**
     * Cette méthode permet d'ajouter des événements cliques pour la suppression
     * d'une formation et donc permet aussi la suppression des formations.
     *
     * @param formation
     */
    public void onSupprimeFormation(Formation formation) {
        formation.getjButtonSupprimeFormation().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer la formation n°" + formation.getIdTab() + ".", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    try {

                        // JUSTE APRES ON RAJOUTE LE CODE SUPPRESSION DES INFORMATIONS DE LA FORMATION
                        // Pour récupèrer l'id de formation c'est -> formation.getIdFormation();
                        // Et pour supprimer le panel de la jTabbedPaneFormation c'est -> jTabbedPaneFormation.remove(formation);
                        if (supprimerFormation(formation.getIdFormation())) {
                            jTabbedPaneFormation.remove(formation);
                        } else {
                            jTabbedPaneFormation.remove(formation);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    // Message si NON
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * Cette méthode permet d'ajouter des événements cliques pour la suppression
     * d'une expérience professionnelle et donc permet aussi la suppression des
     * expériences professionnelles.
     *
     * @param experiencePro
     */
    public void onSupprimeExperiencePro(ExperiencePro experiencePro) {
        experiencePro.getjButtonSupprimeExperiencePro().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer l'expérience professionnelle n°" + experiencePro.getIdTab() + ".", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    try {

                        // JUSTE APRES ON RAJOUTE LE CODE SUPPRESSION DES INFORMATIONS DE LA FORMATION
                        // Pour récupèrer l'id de Exp. Pro c'est -> experiencePro.getIdExperiencePro();
                        // Et pour supprimer le panel de la jTabbedPaneExperiencePro c'est -> jTabbedPaneExperiencePro.remove(experiencePro);
                        if (supprimerExperiencePro(experiencePro.getIdExperiencePro())) {
                            jTabbedPaneExperiencePro.remove(experiencePro);
                        } else {
                            jTabbedPaneExperiencePro.remove(experiencePro);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    // Message si NON
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * Cette méthode permet d'ajouter des événements cliques pour la suppression
     * d'une expérience professionnelle et donc permet aussi la suppression des
     * expériences professionnelles.
     *
     * @param informationComp
     */
    public void onSupprimeInfoComp(InformationComp informationComp) {
        informationComp.getjButtonSupprimeInfoComp().addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int reply = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer l'info comp n°" + informationComp.getIdTab() + ".", "Comfimez la suppression !", JOptionPane.YES_NO_OPTION);
                if (reply == JOptionPane.YES_OPTION) {
                    try {

                        // JUSTE APRES ON RAJOUTE LE CODE SUPPRESSION DES INFORMATIONS DE LA FORMATION
                        // Pour récupèrer l'id de Exp. Pro c'est -> experiencePro.getIdExperiencePro();
                        // Et pour supprimer le panel de la jTabbedPaneExperiencePro c'est -> jTabbedPaneExperiencePro.remove(experiencePro);
                        if (supprimerInfoComp(informationComp.getIdInfoComp())) {
                            jTabbedPaneInformationsComp.remove(informationComp);
                        } else {
                            jTabbedPaneInformationsComp.remove(informationComp);
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(CreationDuCV.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    // Message si NON
                }

            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    /**
     * Grâce à l'identifiant de la formation cette méthode est capable de
     * supprimer une formation de la base de donnée.
     *
     * @param idFormation
     * @return
     * @throws SQLException
     */
    public boolean supprimerFormation(Integer idFormation) throws SQLException {
        Integer res;
        if (idFormation != null) {
            res = DaoSIO.getInstance().requeteAction("DELETE FROM `formation` WHERE id = " + idFormation);
            // Ternaire java à voir sur internet
            return res != null ? true : false;
        }
        return false;
    }

    /**
     * Grâce à l'identifiant de l'expérience professionnelle cette méthode est
     * capable de supprimer une expérience professionnelle de la base de donnée.
     *
     * @param idExperiencePro
     * @return
     * @throws SQLException
     */
    public boolean supprimerExperiencePro(Integer idExperiencePro) throws SQLException {
        Integer res;
        if (idExperiencePro != null) {
            res = DaoSIO.getInstance().requeteAction("DELETE FROM `experience_pro` WHERE id = " + idExperiencePro);
            return res != null ? true : false;
        }
        return false;
    }

    /**
     * Grâce à l'identifiant de la formation cette méthode est capable de
     * supprimer une info comp de la base de donnée.
     *
     * @param idInfoComp
     * @return
     * @throws SQLException
     */
    public boolean supprimerInfoComp(Integer idInfoComp) throws SQLException {
        Integer res;
        if (idInfoComp != null) {
            res = DaoSIO.getInstance().requeteAction("DELETE FROM `info_comp` WHERE id = " + idInfoComp);
            // Ternaire java à voir sur internet
            return res != null ? true : false;
        }
        return false;
    }

    /**
     * Grâce à l'identifiant d'un CV avec cette méthode on peut supprimer un CV
     * de la base de donnée.
     *
     * @param idCV
     * @return
     * @throws SQLException
     */
    public boolean supprimerCV(Integer idCV) throws SQLException {
        Integer res;
        if (idCV != null) {
            res = DaoSIO.getInstance().requeteAction("DELETE FROM `cv` WHERE id = " + idCV);
            return res != null ? true : false;
        }
        return false;
    }

    // Accesseurs ou mutateurs pour la base de donnée
    /**
     * Permet de récuperer toute les informations d'un utilisateur de puis la
     * base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getUtilisateur(Integer id) throws SQLException {
        if (DaoSIO.getInstance().connexionActive()) {
            ResultSet res = DaoSIO.getInstance().requeteSelection("SELECT id, statut, identifiant, nom, prenom, num_telephone, courriel, date_de_naissance, num_telephone_deux, site_web, num_rue, adresse, info_complementaire FROM utilisateurs WHERE id = " + id);

            if (res != null && res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'un cv de puis la base de
     * donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getCV(Integer id, Integer id_utilisateur) throws SQLException {
        if (id != null && DaoSIO.getInstance().connexionActive()) {
            ResultSet res = DaoSIO.getInstance().requeteSelection("SELECT * FROM cv WHERE id = " + id + " AND id_utilisateur = " + id_utilisateur);

            if (res != null && res.isBeforeFirst()) {
                return resultSetToList(res);
            }
            return null;
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'une formation de puis la
     * base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getFormation(Integer id) throws SQLException {
        List<Map<String, Object>> cv = getCV(this.idCV, id);
        if (cv != null) {
            ResultSet res = DaoSIO.getInstance().requeteSelection("SELECT * FROM formation WHERE id_cv = " + cv.get(0).get("id"));

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'une Expérience pro de puis
     * la base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getExperiencePro(Integer id) throws SQLException {
        List<Map<String, Object>> cv = getCV(this.idCV, id);
        if (cv != null) {
            ResultSet res = DaoSIO.getInstance().requeteSelection("SELECT * FROM experience_pro WHERE id_cv = " + cv.get(0).get("id"));

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Permet de récuperer toute les informations d'une Expérience pro de puis
     * la base de donnée grace à l'id de l'utilisateur
     *
     * @param id
     * @return
     * @throws SQLException
     */
    public List<Map<String, Object>> getInformationsComp(Integer id) throws SQLException {
        List<Map<String, Object>> cv = getCV(this.idCV, id);
        if (cv != null) {
            ResultSet res = DaoSIO.getInstance().requeteSelection("SELECT * FROM info_comp WHERE id_cv = " + cv.get(0).get("id"));

            if (res.isBeforeFirst()) {
                return resultSetToList(res);
            }
        }
        return null;
    }

    /**
     * Convertir le ResultSet en une liste de cartes, où chaque carte représente
     * une ligne avec columnNames et columValues
     *
     * @param res
     * @return
     * @throws SQLException
     */
    private List<Map<String, Object>> resultSetToList(ResultSet res) throws SQLException {
        ResultSetMetaData md = res.getMetaData();
        int columns = md.getColumnCount();
        List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
        while (res.next()) {
            Map<String, Object> row = new HashMap<String, Object>(columns);
            for (int i = 1; i <= columns; ++i) {
                row.put(md.getColumnName(i), res.getObject(i));
            }
            rows.add(row);
        }
        return rows;
    }

    public void updateJComboBoxListeCVs() {
        this.tabIdCVs = DaoSIO.getInstance().getIdCV();
        jComboBoxListeCVs.removeAllItems();

        for (Integer i = 0; i < this.tabIdCVs.size(); i++) {
            jComboBoxListeCVs.addItem("CV n°" + (i + 1));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonImportCV;
    private javax.swing.JButton jButtonNouveauCV;
    private javax.swing.JButton jButtonSupprimeCV;
    private javax.swing.JButton jButtonValidationCV;
    private javax.swing.JButton jButtonValideExperiencePro;
    private javax.swing.JButton jButtonValideFormation;
    private javax.swing.JButton jButtonValideInfoComp;
    private javax.swing.JComboBox<String> jComboBoxListeCVs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelDescription;
    private javax.swing.JLabel jLabelMaitrise;
    private javax.swing.JLabel jLabelTitre;
    private javax.swing.JLabel jLabelTitrePrincipal;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerLevelMaitrise1;
    private javax.swing.JSpinner jSpinnerLevelMaitrise2;
    private javax.swing.JTabbedPane jTabbedPaneExperiencePro;
    private javax.swing.JTabbedPane jTabbedPaneFormation;
    private javax.swing.JTabbedPane jTabbedPaneInformationsComp;
    private javax.swing.JTextArea jTextAreaDescription;
    private javax.swing.JTextField jTextFieldMaitrise1;
    private javax.swing.JTextField jTextFieldMaitrise2;
    private javax.swing.JTextField jTextFieldTitre;
    // End of variables declaration//GEN-END:variables
}
